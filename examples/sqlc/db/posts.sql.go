// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: posts.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const countPosts = `-- name: CountPosts :one
SELECT COUNT(*) FROM posts
`

func (q *Queries) CountPosts(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countPosts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countPublishedPosts = `-- name: CountPublishedPosts :one
SELECT COUNT(*) FROM posts WHERE published = true
`

func (q *Queries) CountPublishedPosts(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countPublishedPosts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
    user_id, title, slug, content, published, published_at
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, user_id, title, slug, content, published, published_at, created_at, updated_at
`

type CreatePostParams struct {
	UserID      int64        `json:"user_id"`
	Title       string       `json:"title"`
	Slug        string       `json:"slug"`
	Content     string       `json:"content"`
	Published   bool         `json:"published"`
	PublishedAt sql.NullTime `json:"published_at"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.UserID,
		arg.Title,
		arg.Slug,
		arg.Content,
		arg.Published,
		arg.PublishedAt,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Slug,
		&i.Content,
		&i.Published,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getPost = `-- name: GetPost :one
SELECT id, user_id, title, slug, content, published, published_at, created_at, updated_at FROM posts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Slug,
		&i.Content,
		&i.Published,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPostBySlug = `-- name: GetPostBySlug :one
SELECT id, user_id, title, slug, content, published, published_at, created_at, updated_at FROM posts
WHERE slug = $1 LIMIT 1
`

func (q *Queries) GetPostBySlug(ctx context.Context, slug string) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostBySlug, slug)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Slug,
		&i.Content,
		&i.Published,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPostWithAuthor = `-- name: GetPostWithAuthor :one
SELECT 
    p.id, p.user_id, p.title, p.slug, p.content, p.published, p.published_at, p.created_at, p.updated_at,
    u.id as author_id,
    u.username as author_username,
    u.email as author_email
FROM posts p
JOIN users u ON p.user_id = u.id
WHERE p.id = $1
LIMIT 1
`

type GetPostWithAuthorRow struct {
	ID             int64        `json:"id"`
	UserID         int64        `json:"user_id"`
	Title          string       `json:"title"`
	Slug           string       `json:"slug"`
	Content        string       `json:"content"`
	Published      bool         `json:"published"`
	PublishedAt    sql.NullTime `json:"published_at"`
	CreatedAt      time.Time    `json:"created_at"`
	UpdatedAt      time.Time    `json:"updated_at"`
	AuthorID       int64        `json:"author_id"`
	AuthorUsername string       `json:"author_username"`
	AuthorEmail    string       `json:"author_email"`
}

func (q *Queries) GetPostWithAuthor(ctx context.Context, id int64) (GetPostWithAuthorRow, error) {
	row := q.db.QueryRowContext(ctx, getPostWithAuthor, id)
	var i GetPostWithAuthorRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Slug,
		&i.Content,
		&i.Published,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AuthorID,
		&i.AuthorUsername,
		&i.AuthorEmail,
	)
	return i, err
}

const listPosts = `-- name: ListPosts :many
SELECT id, user_id, title, slug, content, published, published_at, created_at, updated_at FROM posts
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListPostsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPosts(ctx context.Context, arg ListPostsParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Slug,
			&i.Content,
			&i.Published,
			&i.PublishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostsByUser = `-- name: ListPostsByUser :many
SELECT id, user_id, title, slug, content, published, published_at, created_at, updated_at FROM posts
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListPostsByUser(ctx context.Context, userID int64) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listPostsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Slug,
			&i.Content,
			&i.Published,
			&i.PublishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPublishedPosts = `-- name: ListPublishedPosts :many
SELECT id, user_id, title, slug, content, published, published_at, created_at, updated_at FROM posts
WHERE published = true
ORDER BY published_at DESC
LIMIT $1 OFFSET $2
`

type ListPublishedPostsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPublishedPosts(ctx context.Context, arg ListPublishedPostsParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listPublishedPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Slug,
			&i.Content,
			&i.Published,
			&i.PublishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const publishPost = `-- name: PublishPost :one
UPDATE posts
SET published = true,
    published_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, user_id, title, slug, content, published, published_at, created_at, updated_at
`

func (q *Queries) PublishPost(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRowContext(ctx, publishPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Slug,
		&i.Content,
		&i.Published,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
SET title = $2,
    slug = $3,
    content = $4,
    published = $5,
    published_at = $6
WHERE id = $1
RETURNING id, user_id, title, slug, content, published, published_at, created_at, updated_at
`

type UpdatePostParams struct {
	ID          int64        `json:"id"`
	Title       string       `json:"title"`
	Slug        string       `json:"slug"`
	Content     string       `json:"content"`
	Published   bool         `json:"published"`
	PublishedAt sql.NullTime `json:"published_at"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePost,
		arg.ID,
		arg.Title,
		arg.Slug,
		arg.Content,
		arg.Published,
		arg.PublishedAt,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Slug,
		&i.Content,
		&i.Published,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
