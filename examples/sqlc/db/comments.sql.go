// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: comments.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const countCommentsByPost = `-- name: CountCommentsByPost :one
SELECT COUNT(*) FROM comments
WHERE post_id = $1
`

func (q *Queries) CountCommentsByPost(ctx context.Context, postID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, countCommentsByPost, postID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createComment = `-- name: CreateComment :one
INSERT INTO comments (
    post_id, user_id, content
) VALUES (
    $1, $2, $3
)
RETURNING id, post_id, user_id, content, created_at, updated_at
`

type CreateCommentParams struct {
	PostID  int64  `json:"post_id"`
	UserID  int64  `json:"user_id"`
	Content string `json:"content"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.PostID, arg.UserID, arg.Content)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments
WHERE id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteComment, id)
	return err
}

const deleteCommentsByPost = `-- name: DeleteCommentsByPost :exec
DELETE FROM comments
WHERE post_id = $1
`

func (q *Queries) DeleteCommentsByPost(ctx context.Context, postID int64) error {
	_, err := q.db.ExecContext(ctx, deleteCommentsByPost, postID)
	return err
}

const getComment = `-- name: GetComment :one
SELECT id, post_id, user_id, content, created_at, updated_at FROM comments
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetComment(ctx context.Context, id int64) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getComment, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPostsWithCommentCounts = `-- name: GetPostsWithCommentCounts :many
SELECT 
    p.id, p.user_id, p.title, p.slug, p.content, p.published, p.published_at, p.created_at, p.updated_at,
    COUNT(c.id) as comment_count
FROM posts p
LEFT JOIN comments c ON p.id = c.post_id
WHERE p.published = true
GROUP BY p.id
ORDER BY p.published_at DESC
`

type GetPostsWithCommentCountsRow struct {
	ID           int64        `json:"id"`
	UserID       int64        `json:"user_id"`
	Title        string       `json:"title"`
	Slug         string       `json:"slug"`
	Content      string       `json:"content"`
	Published    bool         `json:"published"`
	PublishedAt  sql.NullTime `json:"published_at"`
	CreatedAt    time.Time    `json:"created_at"`
	UpdatedAt    time.Time    `json:"updated_at"`
	CommentCount int64        `json:"comment_count"`
}

func (q *Queries) GetPostsWithCommentCounts(ctx context.Context) ([]GetPostsWithCommentCountsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsWithCommentCounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPostsWithCommentCountsRow{}
	for rows.Next() {
		var i GetPostsWithCommentCountsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Slug,
			&i.Content,
			&i.Published,
			&i.PublishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CommentCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCommentsByPost = `-- name: ListCommentsByPost :many
SELECT 
    c.id, c.post_id, c.user_id, c.content, c.created_at, c.updated_at,
    u.username as author_username
FROM comments c
JOIN users u ON c.user_id = u.id
WHERE c.post_id = $1
ORDER BY c.created_at ASC
`

type ListCommentsByPostRow struct {
	ID             int64     `json:"id"`
	PostID         int64     `json:"post_id"`
	UserID         int64     `json:"user_id"`
	Content        string    `json:"content"`
	CreatedAt      time.Time `json:"created_at"`
	UpdatedAt      time.Time `json:"updated_at"`
	AuthorUsername string    `json:"author_username"`
}

func (q *Queries) ListCommentsByPost(ctx context.Context, postID int64) ([]ListCommentsByPostRow, error) {
	rows, err := q.db.QueryContext(ctx, listCommentsByPost, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListCommentsByPostRow{}
	for rows.Next() {
		var i ListCommentsByPostRow
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AuthorUsername,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCommentsByUser = `-- name: ListCommentsByUser :many
SELECT id, post_id, user_id, content, created_at, updated_at FROM comments
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListCommentsByUser(ctx context.Context, userID int64) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, listCommentsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comment{}
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComment = `-- name: UpdateComment :one
UPDATE comments
SET content = $2
WHERE id = $1
RETURNING id, post_id, user_id, content, created_at, updated_at
`

type UpdateCommentParams struct {
	ID      int64  `json:"id"`
	Content string `json:"content"`
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, updateComment, arg.ID, arg.Content)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
